import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

import javax.swing.Timer;


public class TimeHandler {
	public Timer quickTimer;
	public Timer dotaCDTimer;
	private static final int quickSpeedMillis = 1000;
	private static final int dotaCDMillis = 5000;
	private Buffer dotaQBuffer;
	private Buffer dotaCBuffer;
	private Buffer honQBuffer;
	private boolean bolDotaCD; 
	
	public TimeHandler() {
		honQBuffer = new Buffer(5);
		dotaQBuffer = new Buffer(5);
		dotaCBuffer = new Buffer(5);
		bolDotaCD = false;
	}
	
	public void triggerDotaCD() {
		DotaCDHandler handler = new DotaCDHandler();
		if (dotaCDTimer != null) {
			if (dotaCDTimer.isRunning()) {
				dotaCDTimer.restart();
				bolDotaCD = true;
				return;
			} 
		} 
		
		dotaCDTimer = new Timer(dotaCDMillis, handler);
		dotaCDTimer.start();
		bolDotaCD = true;
		
	}
	
	public void startQuickTimer() {
		QuickTimerHandler handler = new QuickTimerHandler();
		if (quickTimer != null) {
			if (quickTimer.isRunning()) {
				quickTimer.restart();
				return;
			} 
		} 
		
		quickTimer = new Timer(dotaCDMillis, handler);
		quickTimer.start();
	}
	
	public void stopQuickTimer() {
		quickTimer.stop();
	}
	
	public class QuickTimerHandler implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent arg0) {


			System.out.println("tick");
		    // get processes
			String line;
			try {
			        Process proc = Runtime.getRuntime().exec("wmic.exe");
			        BufferedReader input = new BufferedReader(new InputStreamReader(proc.getInputStream()));
			        OutputStreamWriter oStream = new OutputStreamWriter(proc.getOutputStream());
			        oStream .write("process where name='explorer.exe'");
			        oStream .flush();
			        oStream .close();
			        while ((line = input.readLine()) != null) {
			            System.out.println(line);
			        }
			        input.close();
			} catch (IOException ioe) {
			        ioe.printStackTrace();
			}
		    //NSLog(@"%@", output);
		    
		    
		    //NSLog(@"<<<processes checked>>>");
		    /*
		    //-------------------check processes------------------
		    BOOL honRunning = false;
		    BOOL dotaRunning = false;
		    BOOL csgoRunning = false;
		    if ([output rangeOfString:@"Heroes"].location == NSNotFound || [output rangeOfString:@"Newerth"].location == NSNotFound) {
		        honRunning = false;
		        //NSLog(@"hon not running, false alarm");
		    } else {
		        honRunning = true;
		        //NSLog(@"hon running, probably true alarm");
		    }
		    if ([output rangeOfString:@"dota"].location == NSNotFound) {
		        dotaRunning = false;
		        //NSLog(@"dota not running, false alarm");
		    } else {
		        dotaRunning = true;
		        //NSLog(@"dota running, probably true alarm");
		    }
		    if ([output rangeOfString:@"csgo"].location == NSNotFound) {
		        csgoRunning = false;
		        //NSLog(@"csgo not running, false alarm");
		    } else {
		        csgoRunning = true;
		        //NSLog(@"csgo running, probably true alarm");
		    }


		    
		    // ---------------- HON handler ----------------------
		    NSLog(@"HoN");
		    if (honQPack > 1 && honRunning) {
		        // user is in game
		        [self inGame:kHEROES_OF_NEWERTH];
		    } else if (honRunning){
		        [self online:kHEROES_OF_NEWERTH];
		        //got no packets but it's on
		    } else {
		        // user is not in game
		        [self offline:kHEROES_OF_NEWERTH];
		        
		    }
		   
		    // -------------- HON handler end --------------------
		    
		    
		    // ---------------- DOTA handler ----------------------
		    NSLog(@"DotA");
		    [dotaQBuffer increment:dotaQPack];
		    NSLog(@"buffer: %i", dotaQBuffer.bufferValue);
		    NSLog(@"dota running: %i", dotaRunning);
		    if (dotaQBuffer.bufferValue > 0 && dotaRunning) {
		        [self inGame:kDOTA2]; //potentially sends notification
		    }
		    if (dotaCPack > 1 && dotaRunning) {
		        // user is in game
		        bolFirstTick = 1; //tricks the app in to not sending a notification
		                          // this is not the queue pop, but the fact of being in a game
		        [self inGame:kDOTA2];
		    } else if (dotaRunning){
		        [self online:kDOTA2];
		        
		    } else {
		        // user is not in game
		        [self offline:kDOTA2];
		    }
		    // -------------- DOTA handler end --------------------
		    
		    
		    
		    dotaCPack = 0;
		    dotaQPack = 0;
		    honQPack = 0;
		    bolFirstTick = 0;
		    //NSLog(@"");
		*/	
		}
		
	}
	
	public class DotaCDHandler implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent arg0) {
			
			dotaCDTimer.stop();
			bolDotaCD = false;
			
		}
		
	}
	
}
