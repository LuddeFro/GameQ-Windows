import java.util.Date;

import org.jnetpcap.Pcap;
import org.jnetpcap.PcapBpfProgram;
import org.jnetpcap.PcapIf;
import org.jnetpcap.packet.PcapPacket;
import org.jnetpcap.packet.PcapPacketHandler;


public class PCapThread implements Runnable {

	private PcapIf device;
	private StringBuilder errbuf;
	private static final String filterString = "ip";
	//private static final String filterString = "udp dst portrange 11235-11335 or tcp dst port 11031 or udp src portrange 27015-27030 or udp dst port 27005";
	
	
	
	public PCapThread(PcapIf device, StringBuilder errbuf) {
		this.errbuf = errbuf;
		this.device = device;
	}
	
	public void run() {
		openStreams(device, errbuf);
	}
	
	private void openStreams(PcapIf device, StringBuilder errbuf) {
		int snaplen = 64 * 1024;           // Capture all packets, no trucation  
        int flags = Pcap.MODE_NON_PROMISCUOUS; // capture all packets  
        int timeout = 10 * 1000;           // 10 seconds in millis  
        Pcap pcap =  
            Pcap.openLive(device.getName(), snaplen, flags, timeout, errbuf);  
  
        if (pcap == null) {  
            System.err.printf("Error while opening device for capture: "  
                + errbuf.toString());  
            return;  
        }  
        
          
        PcapBpfProgram filter = new PcapBpfProgram();
        String expression = filterString;
        int optimize = 0; // 1 means true, 0 means false
        int netmask = 0;
        
        int r = pcap.compile(filter, expression, optimize, netmask);
        if (r != Pcap.OK) {
          System.out.println("Filter error: " + pcap.getErr());
        }
        pcap.setFilter(filter);
        
        
        PcapPacketHandler<String> handler = new PcapPacketHandler<String>() {  
        	  
            public void nextPacket(PcapPacket packet, String user) {  
            	System.out.println(packet.getCaptureHeader().toString());
                System.out.printf("Received packet at %s caplen=%-4d len=%-4d %s\n",  
                    new Date(packet.getCaptureHeader().timestampInMillis()),   
                    packet.getCaptureHeader().caplen(),  // Length actually captured
                    packet.getCaptureHeader().wirelen(), // Original length   
                    user                                 // User supplied object  
                    );  
            }  
        }; 
     
        int cnt = 0; // Capture packet count
        String out = "packet caught"; // Our custom object to send into the handler
        System.out.println("stream opening");
        pcap.loop(cnt, handler, out); // Each packet will be dispatched to the handler
        System.out.println("stream closing");
        pcap.close();
        System.out.println("stream closed");
        
	}
	
}
